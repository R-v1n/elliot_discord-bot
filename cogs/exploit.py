from discord.ext import commands
import urllib.parse,urllib.request,re
import wikipedia
#create tools to help in ctfs
class hax0r_tools(commands.Cog):
    def __init__(self,bot):
        self.bot=bot

    #define search fns
    #yoiutube search fn
    async def yt_search(self,ctx,keyword,nor):
        query = urllib.parse.urlencode({'search_query':keyword})
        url= urllib.request.urlopen('http://www.youtube.com/results?' + query)
        search_results = re.findall(r'/watch\?v=(.{11})',url.read().decode())
        if nor==1:
            await ctx.send('http://www.youtube.com/watch?v=' + search_results[1])
            return
        for i in range(int(nor)):
            url_keys='http://www.youtube.com/watch?v=' + search_results[i]            
            await ctx.send(url_keys)
    #wikipedia search fn
    async def wiki_search(self,ctx,keyword):        
        wiki_summary=wikipedia.summary(keyword)
        await ctx.send(wiki_summary)
    #expoit search fn
    async def exploit_search(self,ctx,key,nor):
    #use subprocess to pipe output from searchsploit
        res="brrrrrr"
        await ctx.send(res)

    @commands.command(name='search')
    async def search_engine(self,ctx,*arg):
        if len(arg)<2:
           await  ctx.send("usage :  !!search <-> {ex,yt} <-> keyword <-> no_of_Results[max:- 5,default:-1]")
           await  ctx.send("usage :  !!search <-> wiki <-> keyword")
           return
        nor=1
        s_type=arg[0]
        key=str(arg[1])
        if len(arg)==3:
            nor=arg[2]
        if int(nor)>=5:
           ctx.send("maximum no_of_Results are 5 ")
           return
        if s_type=="ex":
             await self.exploit_search(ctx,key,nor)
        elif s_type=="wiki":
             await self.wiki_search(ctx,key)
        elif s_type=="yt":
             await self.yt_search(ctx,key,nor)

def setup(bot):
    bot.add_cog(hax0r_tools(bot))
